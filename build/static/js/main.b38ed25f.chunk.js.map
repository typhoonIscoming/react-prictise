{"version":3,"sources":["pages/spuare.js","utils/browser.js","pages/Second.js","pages/Home.js","pages/Mine.js","router/index.js","utils/menu.js","common/menu.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","value","btn2","params","setState","_this2","react_default","a","createElement","className","onClick","num","parseInt","Math","random","concat","handClick","React","Component","browsertype","ua","window","navigator","userAgent","flag","find","item","console","log","indexOf","cookie","get","test","isNaN","Second","name","age","data","e","prevState","browser","getStateValue","bind","Date","getTime","newProps","newState","nextProps","nextState","prevProps","Home","MainRoute","Switch","Route","exact","path","Redirect","to","component","Mine","utils_menu","url","MyComponent","menu","map","index","key","NavLink","activeClassName","App","src_router","common_menu","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b38ed25f.chunk.js","sourcesContent":["// eslint-disable-next-line\nimport React, { Component } from 'react';\n\nclass Square extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 'hahaha',\n            btn2: '初始值',\n            ...props,\n        }\n    }\n    handClick(value) {\n        const params = {\n            btn2: '更新后的值' + value,\n        }\n        this.setState({ ...params })\n    }\n    render() {\n        return (\n            <div>\n                <button\n                    className=\"square\"\n                    onClick={() => {\n                        const num = parseInt(Math.random() * 100)\n                        this.setState({value: `new set value ${num}`})\n                    }}>\n                    {this.state.value}\n                </button>\n                <button onClick={() => {\n                    const num = parseInt(Math.random() * 100)\n                    this.handClick(num)\n                }}>\n                    {this.state.btn2}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Square\n\n","\nimport cookie from 'js-cookie'\nimport { find, isNaN } from 'lodash'\n// 判断浏览器类型\n// pc、wx、app、phone\n\nconst browsertype = () => {\n  const ua = window.navigator.userAgent;\n  const agents = ['Android', 'iPhone', 'SymbianOS', 'Windows Phone', 'iPad', 'iPod']\n  const flag = find(agents, (item) => {\n    console.log('item=', item)\n    return ua.indexOf(item) > -1\n  })\n  if (!!cookie.get('http_ostype')) return 'app' // eslint-disable-line\n  else if (/MicroMessenger/i.test(ua)) return 'wx'\n  else if (!isNaN(flag)) return 'phone'\n  return 'pc'\n}\n\nexport default browsertype\n","import React, { Component } from 'react';\nimport browser from '../utils/browser'\n\n\n\n\nclass Second extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: 'zhangsan',\n            age: 20,\n            ...props,\n        }\n    }\n    getStateValue(data, e) {\n        this.setState((prevState, props) => {\n            return {age: ++prevState.age}\n        })\n        console.log(browser())\n    }\n    render() {\n        return (\n            <div className='second-container'>\n                <p>我是第二页的p标签，我最牛逼{this.state.age}</p>\n                <button onClick={this.getStateValue.bind(this, this.state.age)}>点击</button>\n            </div>\n        )\n    }\n    componentWillMount() {\n        console.log('componentWillMount,', new Date().getTime())\n    }\n    componentDidMount() {\n        console.log('componentDidMount,', new Date().getTime())\n    }\n    componentWillReceiveProps() {\n        console.log('componentWillReceiveProps,', new Date().getTime())\n    }\n    shouldComponentUpdate(newProps, newState) {\n        console.log('shouldComponentUpdate,', new Date().getTime())\n        return true;\n    }\n    componentWillUpdate(nextProps, nextState) {\n        console.log('componentWillUpdate', new Date().getTime());\n    }\n    componentDidUpdate(prevProps, prevState) {\n        console.log('componentDidUpdate,', new Date().getTime())\n    }\n    componentWillUnmount() {\n        console.log('componentWillUnmount,', new Date().getTime())\n    }\n\n}\n\nexport default Second\n","// eslint-disable-next-line\nimport React, { Component } from 'react';\n\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div className='home-page'>\n                我是 home页面\n            </div>\n        )\n    }\n}\n\nexport default Home","// eslint-disable-next-line\nimport React, { Component } from 'react';\n\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div className='home-page'>\n                我是 Mine页面\n            </div>\n        )\n    }\n}\n\nexport default Home","import React from 'react'\n// import { Router, Route, BrowserRouter } from 'react-router-dom'\nimport './router.css'\nimport {\n    // BrowserRouter as Router,\n    Route,\n    Switch,\n    Redirect,\n  } from 'react-router-dom'\n\nimport Square from '../pages/spuare.js'\nimport Second from '../pages/Second'\nimport Home from '../pages/Home.js'\nimport Mine from '../pages/Mine'\n\nclass MainRoute extends React.Component {\n    getDefaultRouter() {\n        return '/Home'\n    }\n    render() {\n        return (\n            <div className='content'>\n                <Switch>\n                    <Route exact path='/'>\n                        <Redirect to='/Home' />\n                    </Route>\n                    <Route path=\"/Home\" component={Home} />\n                    <Route path=\"/Second\" component={Second} />\n                    <Route path=\"/Square\" component={Square} />\n                    <Route path=\"/Mine\" component={Mine} />\n                </Switch>\n            </div>\n        )\n    }\n}\n\nexport default MainRoute","export default [\n    { name: '首页', url: '/' },\n    { name: '产品', url: '/Square' },\n    { name: '发现', url: '/Second' },\n    { name: '我的', url: '/Mine' }\n]","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nimport './menu.css'\n\nimport menu from '../utils/menu'\n\n// class Item extends React.Component{\n//     constructor(props) {\n//         super(props);\n//         this.handClick = this.handClick.bind(this)\n//     }\n//     handClick(str) {\n//         console.log('你点击了', str)\n//     }\n//     render() {\n//         return (\n//             <li onClick={this.handClick(this.props.data.name)}>{this.props.data.name}</li>\n//         )\n//     }\n    \n// }\n\nconst MyComponent = (props) => {\n    console.log('自组建打印父组件的props', props)\n    return (\n        <ul className='menu-container'>\n            { menu.map((item, index) => {\n            // return <Item key={index} data={item}/>\n            return (\n                <li key={index}>\n                    <NavLink\n                        to={item.url}\n                        activeClassName='selected'\n                    >\n                        {item.name}\n                    </NavLink>\n                </li>)\n            }) }\n        </ul>\n    )\n}\n\nexport default MyComponent","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport MainRoute from './router'\nimport Menu from './common/menu'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MainRoute />\n        <Menu value='this is parentComponent from App' />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\n\n// import { hashHistory } from 'react-router'\n\nimport App from './App';\n// import RouterMap from './router/index.js'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}